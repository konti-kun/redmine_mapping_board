<div class="contextual">
  <% if User.current.allowed_to?(:add_issues, @project, :global => true) %>
  <%= link_to l(:label_new_note), new_mappingboard_note_path(mappingboard_id: @mappingboard.id), :remote => true, :class => "icon icon-add" %>
  <% end %>
  <a class="icon icon-add" id="new_image_btn" style="cursor:pointer;"><%= l(:label_new_image) %></a>
</div>
<div class="mappingboard-content">
<ul class="board-tab">
<% @mappingboards.each do |board| %>
  <li role="presentation" class="<%= if board.id == @mappingboard.id then 'active' else 'unactive' end %>"><% if board.id == @mappingboard.id %><a><%= board.name %></a><% else %><%= link_to board.name, {controller: 'mappingboards', action: 'show', id: board.id}, {style: 'display: inline-block;padding-right: 0px;'} %><% end %></li>
<% end %>
<li role="presentation" class="add-board"><%= link_to "+",mappingboards_path(params: {project_id: @project.id}), method: :post %></li>
</ul>
<%= csrf_meta_tags %>
<div class="svg_panel">
<svg>
<filter id="drop-shadow">
  <feGaussianBlur in="SourceAlpha" stdDeviation="3"></feGaussianBlur>
  <feOffset in="blur" result="offsetBlur" dx="2" dy="2"/>
</filter>
<filter id="symbol-shadow" width="160%" height="160%">
  <feGaussianBlur in="SourceAlpha" stdDeviation="12" result="blur" />
  <feFlood flood-color="#040404" in="blue" flood-opacity="0.4" result="color" />
  <feComposite in="blur" in2="color" operator="in" result="shadow" />
  <feOffset in="shadow" dx="12" dy="12" result="offset" />
  <feMerge>
    <feMergeNode in="offset" />
    <feMergeNode in="SourceGraphic" />
  </feMerge>
</filter>
<filter id="symbol-select" width="120" height="120">
  <feGaussianBlur in="SourceAlpha" stdDeviation="20" result="blur" />
  <feFlood flood-color="#00c3ea" in="blue" flood-opacity="0.8" result="color">
  <animate attributeName="flood-opacity" values="0.8;0.2;0.8;" dur="3s" repeatCount="indefinite"/>
  </feFlood>
  <feComposite in="color" in2="blur" operator="in" result="shadow" />
  <feOffset in="SourceGraphic" dx="12" dy="12" result="offset" />
  <feOffset in="shadow" dx="12" dy="12" result="offset-s" />
  <feMerge>
    <feMergeNode in="offset-s" />
    <feMergeNode in="offset" />
  </feMerge>
</filter>
</svg>
</div>
</div>
<% content_for :header_tags do %>
  <%= stylesheet_link_tag 'jstoolbar' %>
  <%= stylesheet_link_tag 'mappingboards', plugin: 'redmine_mapping_board' %>
<% end %>
<%= javascript_include_tag src ="https://d3js.org/d3.v5.min.js" %>
<script src="https://d3js.org/d3-collection.v1.min.js"></script>
<script src="https://d3js.org/d3-dispatch.v1.min.js"></script>
<script src="https://d3js.org/d3-dsv.v1.min.js"></script>
<script src="https://d3js.org/d3-request.v1.min.js"></script>
<%= javascript_include_tag src ="common.js", :plugin => "redmine_mapping_board" %>
<%= javascript_include_tag src ="drawmap.js", :plugin => "redmine_mapping_board" %>
<%= javascript_include_tag src ="drawimages.js", :plugin => "redmine_mapping_board" %>
<script>
const params = {
  "issue_link" :"<%= url_for :controller => 'issues', :action => 'show', :id => 0 %>",
  "get_images_link" : "<%= url_for :controller => 'mappingattachementimages', :action => 'index', :project_id=> @project.id %>",
  "images_link" : "<%= url_for :controller => 'mappingimages', :action => 'create', :mappingboard_id => @mappingboard.id %>",
  "notes_link" :"<%= url_for :controller => 'notes', :action => 'index', :mappingboard_id => @mappingboard.id %>",
  "update_pos" :"<%= url_for :controller => 'notes', :action => 'update_pos', :mappingboard_id => @mappingboard.id, :id => 0 %>",
  "lines_link" :"<%= url_for :controller => 'notes', :action => 'lines', :mappingboard_id => @mappingboard.id %>",
  "message_conform_del_note" :"<%= l(:message_conform_del_note) %>",
  "message_conform_del_image" :"<%= l(:message_conform_del_image) %>",
  "message_conform_zero_image":"<%= l(:message_conform_zero_image) %>"
}
function main(){
  const svg = d3.select("svg");
  const content_node = d3.select("#content").node();
  svg
    .attr("width",content_node.clientWidth)
    .attr("height",content_node.clientHeight);

  svg
    .append("g")
      .attr("class", "ground")
    .append("rect").attr("opacity",-1)
      .attr("x",0).attr("y",0)
      .attr("width",svg.attr("width"))
      .attr("height",svg.attr("height"));
  svg
    .append("g")
      .attr("class", "images no_target_g");
  svg
    .append("g")
      .attr("class", "lines");
  svg
    .append("g")
      .attr("class", "notes");
  const selector = svg
    .append("g")
      .attr("class", "selector");

  svg
    .append("g")
    .attr("class", "range");

  const board_tabs = d3.select(".board-tab").selectAll(".unactive");
  board_tabs
    .append("span")
      .style("cursor","pointer")
      .style("font-size","80%")
      .text("(X)")
      .style("display","none");
  function make_delete_btn(d,i){
    d3.select(this).select("span")
      .style("display","inline");

  }
  function hide_delete_btn(d,i){
    d3.select(this).select("span")
      .style("display","none");
  }
  board_tabs
    .on("mouseover", make_delete_btn)
    .on("mouseout", hide_delete_btn)

  board_tabs.select("span")
    .on("click",function(d){
      if(window.confirm('<%= l(:message_conform_del_board) %>')){
        const url = d3.select(this.parentNode).select("a").attr("href")
        const token = d3.select('meta[name="csrf-token"]').attr('content');
        d3.request(url)
          .header('X-CSRF-Token', token)
          .send("delete", null, function(data){
            location.reload();
          });
      }
    });

  const update_board_name = function(){
    const token = d3.select('meta[name="csrf-token"]').attr('content');
    const target_name = d3.select("#change-board").node().value;
    const formdata = new FormData();
    formdata.append("mappingboard[name]",target_name);
    d3.request("<%= url_for controller: 'mappingboards', action: 'update', id: @mappingboard.id %>")
      .header('X-CSRF-Token', token)
      .send("put", formdata, function(data){
      d3.select(".board-tab > li.active > a").text(target_name);
      const board_rect = d3.select(".board-tab > li.active > a").node().getBoundingClientRect();
      d3.select("#change-board").style("visibility","hidden")
        .style("width", (board_rect.width-2) + "px");
      });
  }

  const board_rect = d3.select(".board-tab > li.active > a").node().getBoundingClientRect();
  d3.select(".board-tab > li.active")
    .append("input")
      .attr("id", "change-board")
      .attr("type", "text")
      .attr("value",d3.select(".board-tab > li.active > a").text())
      .style("visibility", "hidden")
      .style("position","absolute")
      .style("margin-top", "-30px")
      .style("margin-left", "1px")
      .style("font-size", "120%")
      .style("width", (board_rect.width-2) + "px")
      .style("border", "none")
      .on("keyup",function(){
        if (d3.event.keyCode === 13) {
          update_board_name();
        }
      })
      .on("focusout", update_board_name);
  d3.select(".board-tab > li.active > a")
      .on("dblclick", function(){
        d3.select("#change-board")
          .style("visibility","visible")
          .node().select();
      });

  const svg_position = d3.select(".svg_panel").node().getBoundingClientRect();

  const button_svg = d3.select("#content")
    .append("div")
      .style("position","absolute")
      .style("top", (svg_position.y + 10 + window.pageYOffset) + "px")
      .style("right", "20px")
    .append("svg")
      .attr("width", 40)
      .attr("height", 300)

  const refresh_btn = button_svg
    .append("g")
      .attr("class", "symbol_btn")
      .attr("transform", "translate(9 9) scale(0.15)")
      .attr("cursor","pointer")
      .attr("filter","url(#symbol-shadow)")

  refresh_btn
    .append("circle").classed("symbol_back", true)
    .attr("r", 100).attr("cx", 70).attr("cy", 70);
  refresh_btn
    .append("path").classed("symbol_line", true)
    .attr("d", "M 83 64 L 129 82 L 146 42 L 130 48 A 66 66 0 1 0 125 107 L 102 96 A 40 40 0 1 1 104 57 Z");


  refresh_btn
    .on("click",function(){
      $.ajax({
        url: "<%= url_for :controller => 'notes', :action => 'index', :mappingboard_id => @mappingboard.id %>",
        method: "get",
        dataType: "json",
        success: function(datas){
          update_notes(datas, d3.select(".notes"));
          update_lines(params['lines_link']);
        }
      });
    });
  
  const moveimages_btn = button_svg
    .append("g");

  moveimages_btn
    .append("circle").classed("symbol_back", true)
    .attr("r", 100).attr("cx", 100).attr("cy", 100);
  moveimages_btn
    .append("rect").classed("symbol_line", true)
    .attr("x", 35).attr("y", 35).attr("width", 130).attr("height", 130);
  moveimages_btn
    .append("rect").classed("symbol_back", true)
    .attr("x", 43).attr("y", 43).attr("width", 114).attr("height", 114);
  moveimages_btn
    .append("path").classed("symbol_line", true)
    .attr("d", "M 82 90 L 121 145 L 48 145 Z");
  moveimages_btn
    .append("circle").classed("symbol_line", true)
    .attr("r", 15).attr("cx", 130).attr("cy", 70);

  moveimages_btn
    .attr("id", "moveimages_btn")
    .attr("class", "symbol_btn")
    .attr("transform", "translate(5 45) scale(0.15)")
    .attr("filter","url(#symbol-shadow)")
    .attr("cursor", "pointer")
    .attr("title", "move image")
    .on("click", function(){
      const notes = d3.select(".notes");
      const images = d3.select(".images");
      const btn = d3.select("#moveimages_btn");
      if(notes.classed("no_target_g")){
        notes.classed("no_target_g", false);
        images.classed("no_target_g", true);
        btn.attr("filter", "url(#symbol-shadow)");
        btn.classed("btn_sel", false);
      }else{
        notes.classed("no_target_g", true);
        images.classed("no_target_g", false);
        btn.attr("filter", "url(#symbol-select)");
        btn.classed("btn_sel", true);
      }
    });

  function zoomed(){
    d3.select(".notes")
      .attr("transform", d3.event.transform);
    d3.select(".lines")
      .attr("transform", d3.event.transform);
    d3.select(".images")
      .attr("transform", d3.event.transform);
  }
  d3.select(".ground").call(
    d3.zoom().translateExtent(
        [[0, 0],[100000,100000]]
      ).scaleExtent([1/2, 12]).on("zoom",zoomed)
  );

  d3.select("#new_image_btn")
  .on("click", function(d){
    drawimages(selector);
  });


  $.ajax({
    url: "<%= url_for :controller => 'notes', :action => 'index', :mappingboard_id => @mappingboard.id %>",
    method: "get",
    dataType: "json",
    success: function(datas){
      update_notes(datas, d3.select(".notes"));
      update_lines(params['lines_link']);
    }
  });
  request_mappingimage(params['images_link'],null,"get");
}
main();
</script>
